{"version":3,"sources":["Analysis.js","chart.js","App.js","serviceWorker.js","index.js","trump.jpg","biden3.jpg"],"names":["Example","props","useState","dropdownOpen","setOpen","console","log","Container","Row","Col","xs","sm","ButtonDropdown","isOpen","toggle","DropdownToggle","caret","color","DropdownMenu","DropdownItem","tag","Link","to","Image","src","trumpImg","roundedCircle","width","height","className","size","bidenImg3","pie","ShowPieChart","pieDataTrump","setPieDataTrump","pieDataBiden","setPieDataBiden","wordsTP","setWordsTP","wordsB","setWordsB","hashtag","useHistory","useParams","dataTrump","labels","datasets","data","backgroundColor","hoverBackgroundColor","optionT","legend","position","padding","tooltips","callbacks","label","tooltipItem","dataset","datasetIndex","total","reduce","previousValue","currentValue","currentIndex","array","index","Math","floor","title","dataBiden","useEffect","fetch","then","res","json","TrumpFeedback","BidenFeedback","Keywords","TrumpWordCloud","BidenWordCloud","options","rotations","rotationAngles","fontSizes","getWordTooltip","text","value","words","enabled","plugins","datalabels","formatter","ctx","sum","chart","map","toFixed","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"sXAmDeA,EA5CC,SAACC,GAAW,IAAD,EACSC,oBAAS,GADlB,mBAChBC,EADgB,KACFC,EADE,KAKvB,OAFAC,QAAQC,IAAIL,GAGR,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,MACf,kBAACF,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KACX,kBAACC,EAAA,EAAD,CAAgBC,OAAQV,EAAcW,OARvC,kBAAMV,GAASD,KASV,kBAACY,EAAA,EAAD,CAAgBC,OAAK,EAACC,MAAM,UAA5B,kBAGA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAcC,IAAKC,IAAMC,GAAG,uBAA5B,cACA,kBAACH,EAAA,EAAD,CAAcC,IAAKC,IAAMC,GAAG,wBAA5B,eACA,kBAACH,EAAA,EAAD,CAAcC,IAAKC,IAAMC,GAAG,uBAA5B,cACA,kBAACH,EAAA,EAAD,CAAcC,IAAKC,IAAMC,GAAG,yBAA5B,mBAIZ,kBAACb,EAAA,EAAD,CAAKE,GAAG,OAEZ,kBAACH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KACX,kBAACY,EAAA,EAAD,CAAOC,IAAKC,IAAUC,eAAa,EAACC,MAAM,MAAMC,OAAO,QACvD,sCAEJ,kBAACnB,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KACX,0BAAMkB,UAAU,MACZ,uBAAGC,KAAK,MAAR,QAGR,kBAACrB,EAAA,EAAD,CAAKE,GAAG,KACJ,kBAACY,EAAA,EAAD,CAAOC,IAAKO,IAAWL,eAAa,EAACC,MAAM,MAAMC,OAAO,QACxD,yC,gBChCL,SAASI,IACpB,OACI,8BACI,kBAAC,EAAD,MACA,kBAACC,EAAD,OAIZ,SAASA,IAAgB,IAAD,EACoB/B,mBAAS,IAD7B,mBACbgC,EADa,KACCC,EADD,OAEoBjC,mBAAS,IAF7B,mBAEbkC,EAFa,KAECC,EAFD,OAGUnC,mBAAS,IAHnB,mBAGboC,EAHa,KAGJC,EAHI,OAIQrC,mBAAS,IAJjB,mBAIbsC,EAJa,KAILC,EAJK,KAMdC,GADUC,cACEC,cAAZF,SACAG,EAAY,CACdC,OAAQ,CACJ,WACA,WACA,WAGJC,SAAU,CAAC,CACPC,KAAMd,EACNe,gBAAiB,CACb,UACA,UACA,WAEJC,qBAAsB,CAClB,UACA,UACA,cAMNC,EAAU,CACZC,OAAQ,CACJC,SAAU,OAEVP,OAAQ,CACJQ,QAAS,KAGjBC,SAAU,CACNC,UAAW,CACPC,MAAO,SAAUC,EAAaV,GAC1B,IAAIW,EAAUX,EAAKD,SAASW,EAAYE,cACpCC,EAAQF,EAAQX,KAAKc,QAAO,SAAUC,EAAeC,EAAcC,EAAcC,GACjF,OAAOH,EAAgBC,KAEvBA,EAAeL,EAAQX,KAAKU,EAAYS,OAE5C,OADiBC,KAAKC,MAAQL,EAAeH,EAAS,IAAO,IACzC,KAExBS,MAAO,SAAUZ,EAAaV,GAC1B,OAAOA,EAAKF,OAAOY,EAAY,GAAGS,WAM5CI,EAAY,CACdzB,OAAQ,CACJ,WACA,WACA,WAEJC,SAAU,CAAC,CACPC,KAAMZ,EACNa,gBAAiB,CACb,UACA,UACA,WAEJC,qBAAsB,CAClB,UACA,UACA,cAgCZsB,qBAAU,WACNC,MAAM,cAAD,OAAe/B,IACfgC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA1B,GAAI,OAAIb,EAAgBa,EAAK6B,eAAiBxC,EAAgBW,EAAK8B,eAAiBvC,EAAWS,EAAK+B,SAASC,gBAC/GvC,EAAUO,EAAK+B,SAASE,qBAGjC,CAACvC,IACJ,IAMMwC,EAAU,CACZC,UAAW,EACXC,eAAgB,EAAE,GAAI,IACtBC,UAAW,CAAC,GAAI,KAIdvD,EAAO,CAAC,IAAK,KACnB,OACI,6BACI,8CAAoBY,EAApB,KACA,kBAAClC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KAEJ,kBAAC,MAAD,CAAKsC,KAAMH,EAAWlB,MAAO,IACzBC,OAAQ,GAAIsD,QAAS/B,IACzB,kBAAC,IAAD,CACIK,UAxBD,CACf8B,eAAgB,SAAAhD,GAAO,gBAAOA,EAAQiD,KAAf,aAAwC,GAAhBjD,EAAQkD,MAAhC,OAwBPN,QAASA,EACTpD,KAAMA,EACN2D,MAAOnD,KAEf,kBAAC7B,EAAA,EAAD,CAAKC,GAAG,MACR,kBAACD,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAAC,MAAD,CAAKsC,KAAMuB,EAAW5C,MAAO,IACzBC,OAAQ,GAAIsD,QAnEhB,CACZ9B,OAAQ,CACJC,SAAU,QAEVP,OAAQ,CACJQ,QAAS,KAIjBC,SAAU,CACNmC,SAAS,GAEbC,QAAS,CACLC,WAAY,CACRC,UAAW,SAACL,EAAOM,GACf,IAAIC,EAAM,EAMV,OALcD,EAAIE,MAAMhD,KAAKD,SAAS,GAAGC,KACjCiD,KAAI,SAAAjD,GACR+C,GAAO/C,MAEe,IAARwC,EAAcO,GAAKG,QAAQ,GAAK,KAGtDjF,MAAO,aA6CH,kBAAC,IAAD,CACIuC,UA/BD,CACf8B,eAAgB,SAAA9C,GAAM,gBAAOA,EAAO+C,KAAd,aAAsC,GAAf/C,EAAOgD,MAA9B,OA+BNN,QAASA,EACTpD,KAAMA,EACN2D,MAAOjD,OCjJhB2D,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKtE,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuE,OAAK,EAACC,KAAK,IAAIC,UAAWtG,IACjC,kBAAC,IAAD,CAAOqG,KAAK,sBAAsBC,UAAWtE,QCHnCuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlH,QAAQkH,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.1fbf5827.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, Row, Col } from 'reactstrap';\r\nimport Image from 'react-bootstrap/Image'\r\nimport trumpImg from './trump.jpg'\r\nimport bidenImg3 from './biden3.jpg'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Link } from \"react-router-dom\";\r\nconst Example = (props) => {\r\n    const [dropdownOpen, setOpen] = useState(false);\r\n    const toggle = () => setOpen(!dropdownOpen);\r\n    console.log(props)\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col xs=\"6\" sm=\"4\" />\r\n                <Col xs=\"6\" sm=\"4\" >\r\n                    <ButtonDropdown isOpen={dropdownOpen} toggle={toggle}>\r\n                        <DropdownToggle caret color=\"danger\">\r\n                            Select hashtag\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem tag={Link} to=\"/sentiment/election\"># Election</DropdownItem>\r\n                            <DropdownItem tag={Link} to=\"/sentiment/democrats\"># Democrats</DropdownItem>\r\n                            <DropdownItem tag={Link} to=\"/sentiment/politics\"># Politics</DropdownItem>\r\n                            <DropdownItem tag={Link} to=\"/sentiment/republican\"># Republican</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </ButtonDropdown>\r\n                </Col>\r\n                <Col sm=\"4\" />\r\n            </Row>\r\n            <Row>\r\n                <Col xs=\"6\" sm=\"4\">\r\n                    <Image src={trumpImg} roundedCircle width=\"171\" height=\"180\" />\r\n                    <h3>Trump</h3>\r\n                </Col>\r\n                <Col xs=\"6\" sm=\"4\" >\r\n                    <span className=\"vs\">\r\n                        <p size=\"40\">VS</p>\r\n                    </span>\r\n                </Col>\r\n                <Col sm=\"4\">\r\n                    <Image src={bidenImg3} roundedCircle width=\"176\" height=\"185\" />\r\n                    <h3>Biden</h3>\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container >\r\n    );\r\n}\r\n\r\nexport default Example;","import React, { useState, useEffect } from \"react\";\r\nimport { Pie } from 'react-chartjs-2';\r\n//import { Row, Col } from 'reactstrap';\r\nimport { useParams } from \"react-router\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Example from \"./Analysis\";\r\nimport ReactWordcloud from 'react-wordcloud';\r\n\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, Row, Col } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function pie() {\r\n    return (\r\n        <main>\r\n            <Example/>\r\n            <ShowPieChart />\r\n        </main>\r\n    )\r\n}\r\nfunction ShowPieChart() {\r\n    const [pieDataTrump, setPieDataTrump] = useState([]);\r\n    const [pieDataBiden, setPieDataBiden] = useState([]);\r\n    const [wordsTP, setWordsTP] = useState([]);\r\n    const [wordsB, setWordsB] = useState([]);\r\n    const history = useHistory();\r\n    let { hashtag } = useParams();;\r\n    const dataTrump = {\r\n        labels: [\r\n            'Positive',\r\n            'Negative',\r\n            'Netural'\r\n\r\n        ],\r\n        datasets: [{\r\n            data: pieDataTrump,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n\r\n        }],\r\n\r\n    }\r\n    const optionT = {\r\n        legend: {\r\n            position: 'left',\r\n\r\n            labels: {\r\n                padding: 20\r\n            }\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n                label: function (tooltipItem, data) {\r\n                    var dataset = data.datasets[tooltipItem.datasetIndex];\r\n                    var total = dataset.data.reduce(function (previousValue, currentValue, currentIndex, array) {\r\n                        return previousValue + currentValue;\r\n                    });\r\n                    var currentValue = dataset.data[tooltipItem.index];\r\n                    var percentage = Math.floor(((currentValue / total) * 100) + 0.5);\r\n                    return percentage + \"%\";\r\n                },\r\n                title: function (tooltipItem, data) {\r\n                    return data.labels[tooltipItem[0].index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const dataBiden = {\r\n        labels: [\r\n            'Positive',\r\n            'Negative',\r\n            'Netural'\r\n        ],\r\n        datasets: [{\r\n            data: pieDataBiden,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ]\r\n        }]\r\n    };\r\n\r\n    const optionB = {\r\n        legend: {\r\n            position: 'right',\r\n\r\n            labels: {\r\n                padding: 20\r\n\r\n            }\r\n        },\r\n        tooltips: {\r\n            enabled: false\r\n        },\r\n        plugins: {\r\n            datalabels: {\r\n                formatter: (value, ctx) => {\r\n                    let sum = 0;\r\n                    let dataArr = ctx.chart.data.datasets[0].data;\r\n                    dataArr.map(data => {\r\n                        sum += data;\r\n                    });\r\n                    let percentage = (value * 100 / sum).toFixed(2) + \"%\";\r\n                    return percentage;\r\n                },\r\n                color: 'black',\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetch(`/sentiment/${hashtag}`)\r\n            .then(res => res.json())\r\n            .then(data => setPieDataTrump(data.TrumpFeedback) & setPieDataBiden(data.BidenFeedback) & setWordsTP(data.Keywords.TrumpWordCloud) &\r\n                setWordsB(data.Keywords.BidenWordCloud)\r\n            );\r\n\r\n    }, [hashtag]);\r\n    const callbacksT = {\r\n        getWordTooltip: wordsTP => `${wordsTP.text} (${wordsTP.value * 15})`,\r\n    }\r\n    const callbacksB = {\r\n        getWordTooltip: wordsB => `${wordsB.text} (${wordsB.value * 15})`,\r\n    }\r\n    const options = {\r\n        rotations: 2,\r\n        rotationAngles: [-45, 45],\r\n        fontSizes: [12, 50]\r\n\r\n    };\r\n\r\n    const size = [600, 400];\r\n    return (\r\n        <div>\r\n            <h3> Feedback for #{hashtag} </h3>\r\n            <Row>\r\n\r\n                <Col xs=\"5\">\r\n\r\n                    <Pie data={dataTrump} width={180}\r\n                        height={50} options={optionT} />\r\n                    <ReactWordcloud\r\n                        callbacks={callbacksT}\r\n                        options={options}\r\n                        size={size}\r\n                        words={wordsTP} />\r\n                </Col>\r\n                <Col xs=\"2\"></Col>\r\n                <Col xs=\"5\">\r\n                    <Pie data={dataBiden} width={180}\r\n                        height={50} options={optionB} />\r\n                    <ReactWordcloud\r\n                        callbacks={callbacksB}\r\n                        options={options}\r\n                        size={size}\r\n                        words={wordsB} />\r\n                </Col>\r\n            </Row>\r\n        </div >\r\n    );\r\n}","import React from 'react';\r\n\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Example from \"./Analysis\";\r\nimport pie from \"./chart.js\"\r\n// import WordCloud from \"./wordCloud.js\"\r\n\r\n// Handel routing for whole pages of the app.\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Example}></Route>\r\n          <Route path=\"/sentiment/:hashtag\" component={pie}></Route>\r\n          {/* <Route path=\"/sentiment/insight\" component={WordCloud}></Route> */}\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import '!style-loader!css-loader!bootstrap/dist/css/bootstrap.css';\r\n//import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/trump.1b599265.jpg\";","module.exports = __webpack_public_path__ + \"static/media/biden3.3e3c6cfc.jpg\";"],"sourceRoot":""}