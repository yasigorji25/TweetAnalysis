{"version":3,"sources":["chart.js","lineChart.js","App.js","serviceWorker.js","index.js","trump.jpg","biden3.jpg"],"names":["pie","ShowPieChart","callbacksT","getWordTooltip","wordsTP","text","value","callbacksB","wordsB","options","rotations","rotationAngles","fontSizes","useState","pieDataTrump","setPieDataTrump","pieDataBiden","setPieDataBiden","setWordsTP","setWordsB","hashtag","setHashtag","history","useHistory","dataTrump","labels","datasets","data","backgroundColor","hoverBackgroundColor","optionT","legend","position","padding","tooltips","callbacks","label","tooltipItem","dataset","datasetIndex","total","reduce","previousValue","currentValue","currentIndex","array","index","Math","floor","title","optionB","dataBiden","size","handleChange","event","target","fetch","then","res","json","TrumpFeedback","BidenFeedback","Keywords","TrumpWordCloud","BidenWordCloud","Container","Row","Col","xs","sm","ButtonDropdown","isOpen","toggle","console","log","DropdownToggle","caret","disabled","DropdownMenu","DropdownItem","name","onClick","Image","src","trumpImg","roundedCircle","width","height","className","bidenImg3","style","words","Button","color","push","Line","rowData","setRowData","LoadingIndicator","props","usePromiseTracker","promiseInProgress","display","justifyContent","alignItems","type","useEffect","trackPromise","map","Trump","Trump_sentiment","Biden","Biden_sentiment","timestamp","date","substring","histories","fontSize","series","xKey","yKey","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.af8900c9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, Row, Col } from 'reactstrap';\r\nimport Image from 'react-bootstrap/Image'\r\nimport trumpImg from './trump.jpg'\r\nimport bidenImg3 from './biden3.jpg'\r\nimport ReactWordcloud from 'react-wordcloud';\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nexport default function pie() {\r\n\r\n    return (\r\n        <main>\r\n            <ShowPieChart />\r\n        </main>\r\n    )\r\n}\r\nconst callbacksT = {\r\n    getWordTooltip: wordsTP => `${wordsTP.text} (${wordsTP.value * 15})`,\r\n}\r\nconst callbacksB = {\r\n    getWordTooltip: wordsB => `${wordsB.text} (${wordsB.value * 15})`,\r\n}\r\nconst options = {\r\n    rotations: 2,\r\n    rotationAngles: [-45, 45],\r\n    fontSizes: [12, 50]\r\n\r\n};\r\n\r\nfunction ShowPieChart() {\r\n    const [pieDataTrump, setPieDataTrump] = useState([]);\r\n    const [pieDataBiden, setPieDataBiden] = useState([]);\r\n    const [wordsTP, setWordsTP] = useState([]);\r\n    const [wordsB, setWordsB] = useState([]);\r\n    const [hashtag, setHashtag] = useState();\r\n    const history = useHistory();\r\n\r\n    const dataTrump = {\r\n        labels: [\r\n            'Positive',\r\n            'Negative',\r\n            'Netural'\r\n\r\n        ],\r\n        datasets: [{\r\n            data: pieDataTrump,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n\r\n        }],\r\n\r\n    }\r\n    const optionT = {\r\n        legend: {\r\n            position: 'left',\r\n\r\n            labels: {\r\n                padding: 20\r\n            }\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n                label: function (tooltipItem, data) {\r\n                    var dataset = data.datasets[tooltipItem.datasetIndex];\r\n                    var total = dataset.data.reduce(function (previousValue, currentValue, currentIndex, array) {\r\n                        return previousValue + currentValue;\r\n                    });\r\n                    var currentValue = dataset.data[tooltipItem.index];\r\n                    var percentage = Math.floor(((currentValue / total) * 100) + 0.5);\r\n                    return percentage + \"%\";\r\n                },\r\n                title: function (tooltipItem, data) {\r\n                    return data.labels[tooltipItem[0].index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const optionB = {\r\n        legend: {\r\n            position: 'right',\r\n\r\n            labels: {\r\n                padding: 20\r\n\r\n            }\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n                label: function (tooltipItem, data) {\r\n                    var dataset = data.datasets[tooltipItem.datasetIndex];\r\n                    var total = dataset.data.reduce(function (previousValue, currentValue, currentIndex, array) {\r\n                        return previousValue + currentValue;\r\n                    });\r\n                    var currentValue = dataset.data[tooltipItem.index];\r\n                    var percentage = Math.floor(((currentValue / total) * 100) + 0.5);\r\n                    return percentage + \"%\";\r\n                },\r\n                title: function (tooltipItem, data) {\r\n                    return data.labels[tooltipItem[0].index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const dataBiden = {\r\n        labels: [\r\n            'Positive',\r\n            'Negative',\r\n            'Netural'\r\n        ],\r\n        datasets: [{\r\n            data: pieDataBiden,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ]\r\n        }]\r\n    };\r\n    const size = [600, 400];\r\n\r\n    const toggle = () => console.log();\r\n\r\n    const handleChange = event => {\r\n        setWordsTP([]);\r\n        setWordsB([]);\r\n        setHashtag(event.target.value);\r\n        fetch(`/sentiment/${event.target.value}`)\r\n            .then(res => res.json())\r\n            .then(data => setPieDataTrump(data.TrumpFeedback) & setPieDataBiden(data.BidenFeedback) & setWordsTP(data.Keywords.TrumpWordCloud) &\r\n                setWordsB(data.Keywords.BidenWordCloud)\r\n            );\r\n    };\r\n\r\n    const handleClickLine = event => {\r\n        history.push(\"/linechart\");\r\n    }\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n                    <Col xs=\"6\" sm=\"4\" />\r\n                    <Col xs=\"6\" sm=\"4\" >\r\n                        <ButtonDropdown isOpen={true} toggle={toggle}>\r\n                            <DropdownToggle caret disabled>\r\n                                Select hashtag\r\n                    </DropdownToggle>\r\n                            <DropdownMenu>\r\n                                <DropdownItem name=\"election\" value=\"election\" onClick={handleChange}># Election</DropdownItem>\r\n                                <DropdownItem name=\"democrats\" value=\"democrats\" onClick={handleChange}># Democrats</DropdownItem>\r\n                                <DropdownItem name=\"politics\" value=\"politics\" onClick={handleChange}># Politics</DropdownItem>\r\n                                <DropdownItem name=\"republican\" value=\"republican\" onClick={handleChange}># Republican</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </ButtonDropdown>\r\n                    </Col>\r\n                    <Col sm=\"4\" />\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"6\" sm=\"4\">\r\n                        <Image src={trumpImg} roundedCircle width=\"171\" height=\"180\" />\r\n                        <h3>Trump</h3>\r\n                    </Col>\r\n                    <Col xs=\"6\" sm=\"4\" >\r\n                        <span className=\"vs\">\r\n                            <p size=\"40\">VS</p>\r\n                        </span>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                        <Image src={bidenImg3} roundedCircle width=\"176\" height=\"185\" />\r\n                        <h3>Biden</h3>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container >\r\n            <div>\r\n                <h3> Feedback for #{hashtag} </h3>\r\n                <Row style={{ 'width': '100%' }}>\r\n                    <Col xs=\"4\">\r\n                        <Pie data={dataTrump} width={150}\r\n                            height={50} options={optionT} />\r\n                        <ReactWordcloud\r\n                            callbacks={callbacksT}\r\n                            options={options}\r\n                            size={size}\r\n                            words={wordsTP} />\r\n                    </Col>\r\n                    <Col xs=\"4\">\r\n                        <Button color=\"primary\" onClick={handleClickLine}>See the support trend</Button>{' '}\r\n                    </Col>\r\n                    <Col xs=\"4\">\r\n                        <Pie data={dataBiden} width={150}\r\n                            height={50} options={optionB} />\r\n                        <ReactWordcloud\r\n                            callbacks={callbacksB}\r\n                            options={options}\r\n                            size={size}\r\n                            words={wordsB} />\r\n                    </Col>\r\n                </Row>\r\n            </div >\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { AgChartsReact } from 'ag-charts-react';\r\nimport { trackPromise } from 'react-promise-tracker';\r\nimport Loader from 'react-loader-spinner';\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\n\r\nexport default function Line() {\r\n    const [rowData, setRowData] = useState([]);\r\n    // store all stocks at first and change while searching\r\n    // get stock symbol by url\r\n    // const pathName = \"http://131.181.190.87:3001/history\" + location.search;\r\n    const LoadingIndicator = props => {\r\n        const { promiseInProgress } = usePromiseTracker();\r\n\r\n        return promiseInProgress &&\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\"\r\n                }}\r\n            >\r\n                <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\r\n            </div>\r\n    };\r\n\r\n    useEffect(() => {\r\n        trackPromise(\r\n            fetch('/line')\r\n                .then(res => res.json())\r\n                .then(data =>\r\n                    data.map(history => {\r\n                        return {\r\n                            Trump: history.Trump_sentiment,\r\n                            Biden: history.Biden_sentiment,\r\n                            timestamp: history.date.substring(0, 10),\r\n                        };\r\n                    })\r\n                )\r\n                .then(histories => setRowData(histories) & console.log(histories))\r\n        )\r\n    }, []);\r\n\r\n    const options = {\r\n        data: rowData,\r\n        title: {\r\n            text: 'Historical Search Trend',\r\n            fontSize: 18,\r\n        },\r\n        series: [{\r\n            xKey: 'timestamp',\r\n            yKey: 'Trump',\r\n        },\r\n        {\r\n            xKey: 'timestamp',\r\n            yKey: 'Biden',\r\n        }],\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <AgChartsReact options={options} />\r\n            <LoadingIndicator />\r\n        </main>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport pie from \"./chart.js\";\r\nimport Line from \"./lineChart.js\"\r\n\r\n// Handel routing for whole pages of the app.\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={pie}></Route>\r\n          <Route path=\"/linechart\" component={Line}></Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/trump.1b599265.jpg\";","module.exports = __webpack_public_path__ + \"static/media/biden3.3e3c6cfc.jpg\";"],"sourceRoot":""}